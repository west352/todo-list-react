{"version":3,"sources":["redux/types.ts","components/NewItemForm.tsx","redux/actions.ts","components/TodoItemDetails.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","redux/reducers.ts","redux/store.ts","index.tsx"],"names":["todoListActionTypes","NewItemForm","dispatch","useDispatch","useState","newItemName","setNewItemName","typing","setTyping","formRef","useRef","clearForm","current","reset","Fragment","id","onSubmit","e","preventDefault","type","payload","name","uuid","createdOn","Date","ref","placeholder","onFocus","onBlur","onChange","target","value","onClick","formatDate","date","moment","format","TodoItemDetails","props","done","doneOn","updatedOn","style","TodoItem","editingMode","setEditingMode","showItemDetails","setShowItemDetails","editedItemName","setEditedItemName","prevItemName","setPrevItemName","quitEditingMode","dispatchUpdateItemAction","updateItem","dispatchDeleteItemAction","toggleItemCheckbox","className","checked","updateItemInput","autoFocus","onKeyUp","key","itemLabelClasses","classNames","itemLabel","deleteItemButton","showItemDetailsButton","TodoList","items","useSelector","state","todoList","toggleAllItemsButton","todoItemJSXElements","map","item","length","App","header","href","rel","now","initialState","undefined","reducers","action","newItem","filter","numDoneItems","numOfItems","toggledItems","updatedList","rootReducer","combineReducers","store","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0535d544.chunk.js","sourcesContent":["export interface TodoItemType {\n    name: string;\n    done: boolean;\n    id: string;\n    createdOn: Date;\n    doneOn: Date | undefined;\n    updatedOn: Date;\n}\n\nexport interface TodoListState {\n    items: TodoItemType[];\n}\n\nexport const todoListActionTypes = {\n    ADD_ITEM: 'ADD_ITEM',\n    DELETE_ITEM: 'DELETE_ITEM',\n    DELETE_ALL_ITEMS: 'DELETE_ALL_ITEMS',\n    TOGGLE_ITEM: 'TOGGLE_ITEM',\n    TOGGLE_ALL_ITEMS: 'TOGGLE_ALL_ITEMS',\n    UPDATE_ITEM: 'UPDATE_ITEM',\n};\n\nexport interface AddItemAction {\n    type: typeof todoListActionTypes.ADD_ITEM;\n    payload: {\n        name: string;\n        id: string;\n        createdOn: Date;\n    };\n}\n\nexport interface DeleteItemAction {\n    type: typeof todoListActionTypes.DELETE_ITEM;\n    payload: {\n        id: string;\n    };\n}\n\nexport interface DeleteAllItemsAction {\n    type: typeof todoListActionTypes.DELETE_ALL_ITEMS;\n}\n\nexport interface ToggleAllItemsAction {\n    type: typeof todoListActionTypes.TOGGLE_ALL_ITEMS;\n    payload: {\n        doneOn: Date;\n    };\n}\n\nexport interface ToggleItemAction {\n    type: typeof todoListActionTypes.TOGGLE_ITEM;\n    payload: {\n        id: string;\n        doneOn: Date;\n    };\n}\n\nexport interface UpdateItemAction {\n    type: typeof todoListActionTypes.UPDATE_ITEM;\n    payload: {\n        id: string;\n        name: string;\n        updatedOn: Date;\n    };\n}\n\nexport type TodoListAction =\n    | AddItemAction\n    | DeleteItemAction\n    | DeleteAllItemsAction\n    | ToggleItemAction\n    | ToggleAllItemsAction\n    | UpdateItemAction;\n","import React, { useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addItem } from '../redux/actions';\n\nconst NewItemForm: React.FC = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const [newItemName, setNewItemName] = useState('');\n    const [typing, setTyping] = useState(false);\n    const formRef = useRef<HTMLFormElement>(null);\n\n    function clearForm(): void {\n        setNewItemName('');\n        setTyping(false);\n        if (formRef.current) {\n            formRef.current.reset();\n        }\n    }\n\n    // handle submit event for createItemForm element\n    function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        dispatch(addItem(newItemName));\n        clearForm();\n    }\n\n    // handle focus event for the input element inside createItemForm element\n    function handleFocus(): void {\n        setTyping(true);\n    }\n\n    // handle change event for the input element inside createItemForm element\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        setNewItemName(e.target.value);\n    }\n\n    // handle focusout event for the input element inside createItemForm element\n    function handleFocusOut(): void {\n        if (newItemName === '') {\n            setTyping(false);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <form id=\"create-item-form\" onSubmit={handleSubmit} ref={formRef}>\n                <input\n                    id=\"create-item-input\"\n                    type=\"text\"\n                    placeholder=\"Add a new item\"\n                    onFocus={handleFocus}\n                    onBlur={handleFocusOut}\n                    onChange={handleChange}\n                />\n                {typing && (\n                    <button type=\"submit\" id=\"create-item-button\">\n                        +\n                    </button>\n                )}\n            </form>\n            <button id=\"clear-button\" onClick={clearForm}>\n                x\n            </button>\n        </React.Fragment>\n    );\n};\n\nexport default NewItemForm;\n","import { v4 as uuid } from 'uuid';\n\nimport {\n    AddItemAction,\n    DeleteAllItemsAction,\n    DeleteItemAction,\n    todoListActionTypes,\n    ToggleAllItemsAction,\n    ToggleItemAction,\n    UpdateItemAction,\n} from './types';\n\nexport const addItem = (name: string): AddItemAction => {\n    return {\n        type: todoListActionTypes.ADD_ITEM,\n        payload: {\n            name: name,\n            id: uuid(),\n            createdOn: new Date(),\n        },\n    };\n};\n\nexport const deleteItem = (id: string): DeleteItemAction => {\n    return {\n        type: todoListActionTypes.DELETE_ITEM,\n        payload: {\n            id: id,\n        },\n    };\n};\n\nexport const deleteAllItems = (): DeleteAllItemsAction => {\n    return {\n        type: todoListActionTypes.DELETE_ALL_ITEMS,\n    };\n};\n\nexport const toggleAllItems = (): ToggleAllItemsAction => {\n    return {\n        type: todoListActionTypes.TOGGLE_ALL_ITEMS,\n        payload: {\n            doneOn: new Date(),\n        },\n    };\n};\n\nexport const toggleItem = (id: string): ToggleItemAction => {\n    return {\n        type: todoListActionTypes.TOGGLE_ITEM,\n        payload: {\n            id: id,\n            doneOn: new Date(),\n        },\n    };\n};\n\nexport const updateItem = ({\n    id,\n    name,\n}: {\n    id: string;\n    name: string;\n}): UpdateItemAction => {\n    return {\n        type: todoListActionTypes.UPDATE_ITEM,\n        payload: {\n            id: id,\n            name: name,\n            updatedOn: new Date(),\n        },\n    };\n};\n","import moment from 'moment';\nimport React from 'react';\n\nimport { TodoItemType } from '../redux/types';\n\ninterface TodoItemDetailsProps extends Omit<TodoItemType, 'name' | 'id'> {}\n\nconst formatDate = (date: Date): string =>\n    moment(date).format('MMMM Do YYYY, h:mm:ss a');\n\nconst TodoItemDetails: React.FC<TodoItemDetailsProps> = (\n    props: TodoItemDetailsProps\n): JSX.Element => {\n    const { done, createdOn, doneOn, updatedOn } = props;\n    const style = {\n        'marginLeft': 'calc(1rem + 0.5vw)',\n    };\n    return (\n        <React.Fragment>\n            <li style={style}>Created on: &nbsp; {formatDate(createdOn)}</li>\n            {done && (\n                <li style={style}>Done on: &nbsp; {formatDate(doneOn as Date)}</li>\n            )}\n            <li style={style}>Updated on: &nbsp; {formatDate(updatedOn)}</li>\n        </React.Fragment>\n    );\n};\n\nexport default TodoItemDetails;\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteItem, toggleItem, updateItem } from '../redux/actions';\nimport { TodoItemType } from '../redux/types';\nimport TodoItemDetails from './TodoItemDetails';\n\ntype TodoItemProps = TodoItemType;\nconst TodoItem: React.FC<TodoItemProps> = (props: TodoItemProps): JSX.Element => {\n    const dispatch = useDispatch();\n    const [editingMode, setEditingMode] = useState(false);\n    const [showItemDetails, setShowItemDetails] = useState(false);\n    const [editedItemName, setEditedItemName] = useState(props.name);\n    const [prevItemName, setPrevItemName] = useState(props.name);\n\n    function quitEditingMode(): void {\n        setEditingMode(false);\n    }\n\n    function dispatchToggleItemAction(): void {\n        dispatch(toggleItem(props.id));\n    }\n\n    function dispatchUpdateItemAction(): void {\n        dispatch(updateItem({ id: props.id, name: editedItemName }));\n    }\n\n    function dispatchDeleteItemAction(): void {\n        dispatch(deleteItem(props.id));\n    }\n\n    function handleKeyUp(e: React.KeyboardEvent<HTMLInputElement>): void {\n        if (e.key === 'Enter') {\n            if (editedItemName) {\n                setPrevItemName(editedItemName);\n                dispatchUpdateItemAction();\n            } else {\n                dispatchDeleteItemAction();\n            }\n            quitEditingMode();\n        } else if (e.key === 'Escape') {\n            setEditedItemName(prevItemName);\n            quitEditingMode();\n        }\n    }\n\n    function handleFocusOut(): void {\n        if (editedItemName) {\n            setPrevItemName(editedItemName);\n            dispatchUpdateItemAction();\n        } else {\n            dispatchDeleteItemAction();\n        }\n        quitEditingMode();\n    }\n\n    function handleTyping(e: React.ChangeEvent<HTMLInputElement>): void {\n        setEditedItemName(e.target.value);\n    }\n\n    function startTyping(): void {\n        setEditingMode(true);\n    }\n\n    function toggleShowItemDetails(): void {\n        setShowItemDetails(!showItemDetails);\n    }\n\n    const toggleItemCheckbox: JSX.Element = (\n        <input\n            type=\"checkbox\"\n            className=\"toggle-item-checkbox\"\n            onChange={dispatchToggleItemAction}\n            checked={props.done}\n        />\n    );\n\n    const updateItemInput: JSX.Element = (\n        <input\n            autoFocus\n            type=\"text\"\n            className=\"update-item-input\"\n            onChange={handleTyping}\n            onKeyUp={handleKeyUp}\n            onBlur={handleFocusOut}\n            value={editedItemName}\n        />\n    );\n\n    const itemLabelClasses = classNames({\n        'item-lable': true,\n        'item-strikethrough': props.done,\n    });\n\n    const itemLabel = (\n        <label onClick={startTyping} className={itemLabelClasses}>\n            {editedItemName}\n        </label>\n    );\n\n    const deleteItemButton: JSX.Element = (\n        <button className=\"x-button\" onClick={dispatchDeleteItemAction}>\n            x\n        </button>\n    );\n\n    const showItemDetailsButton: JSX.Element = (\n        <button onClick={toggleShowItemDetails} className=\"show-item-details-button\">\n            ...\n        </button>\n    );\n\n    if (editingMode) {\n        return (\n            <li>\n                {toggleItemCheckbox}\n                {updateItemInput}\n                {deleteItemButton}\n            </li>\n        );\n    } else {\n        return (\n            <React.Fragment>\n                <li>\n                    {toggleItemCheckbox}\n                    {itemLabel}\n                    {showItemDetailsButton}\n                    {deleteItemButton}\n                </li>\n                {showItemDetails && (\n                    <TodoItemDetails\n                        done={props.done}\n                        doneOn={props.doneOn}\n                        updatedOn={props.updatedOn}\n                        createdOn={props.createdOn}\n                    />\n                )}\n            </React.Fragment>\n        );\n    }\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteAllItems, toggleAllItems } from '../redux/actions';\nimport { RootState } from '../redux/store';\nimport { TodoItemType } from '../redux/types';\nimport NewItemForm from './NewItemForm';\nimport TodoItem from './TodoItem';\n\nconst TodoList: React.FC = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const items: TodoItemType[] = useSelector(\n        (state: RootState) => state.todoList.items\n    );\n\n    function dispatchDeleteAllItemsAction() {\n        dispatch(deleteAllItems());\n    }\n\n    function dispatchToggleAllItemsAction() {\n        dispatch(toggleAllItems());\n    }\n\n    const toggleAllItemsButton: JSX.Element = (\n        <input\n            type=\"checkbox\"\n            id=\"toggle-all-items-button\"\n            onClick={dispatchToggleAllItemsAction}\n        />\n    );\n\n    const todoItemJSXElements: JSX.Element[] = items.map(item => {\n        return (\n            <TodoItem\n                name={item.name}\n                done={item.done}\n                id={item.id}\n                key={item.id}\n                createdOn={item.createdOn}\n                doneOn={item.doneOn}\n                updatedOn={item.updatedOn}\n            />\n        );\n    });\n\n    return (\n        <div className=\"content-div\">\n            <div className=\"create-item-div\">\n                {items.length > 0 && toggleAllItemsButton}\n                <NewItemForm />\n            </div>\n            <div className=\"item-list-div\">\n                <br />\n                <ul>{todoItemJSXElements}</ul>\n            </div>\n            <button\n                id=\"delete-all-items-button\"\n                onClick={dispatchDeleteAllItemsAction}\n            >\n                DELETE ALL\n            </button>\n        </div>\n    );\n};\n\nexport default TodoList;\n","import React from 'react';\n\nimport TodoList from './components/TodoList';\n\nconst App: React.FC = (): JSX.Element => {\n    const header = (\n        <div className=\"title-div\">\n            <span className=\"title\">\n                <a href=\"#\">Todo List</a>\n            </span>\n            <span className=\"author\">\n                <a\n                    href=\"https://github.com/west352\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    &nbsp; West Liu &nbsp;\n                </a>\n            </span>\n        </div>\n    );\n    return (\n        <div className=\"app-container\">\n            {header}\n            <TodoList />\n        </div>\n    );\n};\n\nexport default App;\n","import { v4 as uuid } from 'uuid';\n\nimport {\n    AddItemAction,\n    DeleteItemAction,\n    TodoItemType,\n    TodoListAction,\n    todoListActionTypes,\n    TodoListState,\n    ToggleAllItemsAction,\n    ToggleItemAction,\n    UpdateItemAction,\n} from './types';\n\nconst now: Date = new Date();\nconst initialState: TodoListState = {\n    items: [\n        {\n            name: 'This is a done item',\n            done: true,\n            id: uuid(),\n            createdOn: now,\n            doneOn: undefined,\n            updatedOn: now,\n        },\n        {\n            name: 'This is an undone item',\n            done: false,\n            id: uuid(),\n            createdOn: now,\n            doneOn: undefined,\n            updatedOn: now,\n        },\n    ],\n};\n\nconst reducers = (\n    state: TodoListState = initialState,\n    action: TodoListAction\n): TodoListState => {\n    switch (action.type) {\n        case todoListActionTypes.ADD_ITEM: {\n            const { name, id, createdOn } = (action as AddItemAction).payload;\n            const newItem = {\n                name: name,\n                done: false,\n                id: id,\n                createdOn: createdOn,\n                doneOn: undefined,\n                updatedOn: createdOn,\n            };\n            return {\n                items: [...state.items, newItem],\n            };\n        }\n\n        case todoListActionTypes.DELETE_ITEM: {\n            const { id } = (action as DeleteItemAction).payload;\n            return {\n                items: state.items.filter(item => item.id !== id),\n            };\n        }\n\n        case todoListActionTypes.DELETE_ALL_ITEMS: {\n            return { items: [] };\n        }\n\n        case todoListActionTypes.TOGGLE_ALL_ITEMS: {\n            const { doneOn } = (action as ToggleAllItemsAction).payload;\n            let numDoneItems = 0;\n            const numOfItems = state.items.length;\n            for (const item of state.items) {\n                if (item.done) {\n                    numDoneItems++;\n                }\n            }\n            if (numDoneItems === numOfItems) {\n                const toggledItems: TodoItemType[] = state.items.map(item => {\n                    return { ...item, done: false, doneOn: undefined };\n                });\n                return {\n                    items: toggledItems,\n                };\n            } else {\n                const toggledItems: TodoItemType[] = state.items.map(item => {\n                    if (item.done) {\n                        return item;\n                    } else return { ...item, done: true, doneOn: doneOn };\n                });\n                return { items: toggledItems };\n            }\n        }\n\n        case todoListActionTypes.TOGGLE_ITEM: {\n            const { id, doneOn } = (action as ToggleItemAction).payload;\n            return {\n                items: state.items.map(item => {\n                    if (item.id !== id) {\n                        return item;\n                    } else {\n                        return {\n                            ...item,\n                            done: !item.done,\n                            doneOn: item.done ? undefined : doneOn,\n                        };\n                    }\n                }),\n            };\n        }\n\n        case todoListActionTypes.UPDATE_ITEM: {\n            const { id, name, updatedOn } = (action as UpdateItemAction).payload;\n            const updatedList: TodoItemType[] = state.items.map(item => {\n                if (item.id !== id) {\n                    return item;\n                } else {\n                    return { ...item, name: name, updatedOn: updatedOn };\n                }\n            });\n            return {\n                items: updatedList,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default reducers;\n","import { applyMiddleware, combineReducers, createStore, Middleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducers from './reducers';\n\nconst rootReducer = combineReducers({\n    todoList: reducers,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/explicit-module-boundary-types\nexport const configureStore = () => {\n    const middlewares: Middleware[] = [];\n    const middleWareEnhancer = applyMiddleware(...middlewares);\n    const store = createStore(rootReducer, composeWithDevTools(middleWareEnhancer));\n    return store;\n};\n","import './styles.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { configureStore } from './redux/store';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}